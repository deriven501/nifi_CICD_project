pipeline {
    agent any
    
    parameters {
        string(name: 'NIFI_VERSION', defaultValue: '1.26.0', description: 'NiFi version to build')
        string(name: 'DOCKERHUB_USER', defaultValue: 'jackal501', description: 'Docker Hub username')
        string(name: 'IMAGE_TAG', defaultValue: '1.26.0', description: 'Docker image tag')
    }
    
    environment {
        IMAGE_NAME = "${params.DOCKERHUB_USER}/nifi-custom"
        FULL_TAG = "${IMAGE_NAME}:${params.IMAGE_TAG}"
    }
    
    stages {
    	stage('clean workspace') {
        	steps {
            	cleanWs()
            }
        }
        stage('Checkout project repo') {
            steps {
                sh """
                    git clone https://github.com/deriven501/nifi_CICD_project.git
                """
            }
        }

        stage('Checkout Nifi Repo') {
            steps {
                dir('nifi_CICD_project') {
                    sh 'git clone "https://github.com/apache/nifi.git"'
                }
                
                dir('nifi_CICD_project/nifi') {
                    sh "git checkout rel/nifi-${params.NIFI_VERSION}"
                }
                
            }
        }
        stage('Build nifi') {
            steps {
                dir("nifi_CICD_project/nifi/nifi-assembly") {
                      sh "mvn clean install -U -DskipTests"
                }
            }
        }

        stage('Prepare Docker Context') {
            steps {
                sh """
                    mkdir -p docker
                    cat > docker/Dockerfile <<'EOF'
                    FROM eclipse-temurin:17-jre-jammy
                        
                    RUN useradd --no-create-home --shell /bin/false nifi
                        
                    ARG NIFI_ZIP
                        
                    RUN apt-get update && \\
                        apt-get install -y --no-install-recommends unzip ca-certificates curl && \\
                        rm -rf /var/lib/apt/lists/*
                        
                    COPY \${NIFI_ZIP} /tmp/
                        
                    RUN mkdir -p /opt/nifi && \\
                        unzip /tmp/\${NIFI_ZIP} -d /opt && \\
                        mv /opt/nifi-*/* /opt/nifi/ && \\
                        rm -rf /tmp/\${NIFI_ZIP} && \\
                        chown -R nifi:nifi /opt/nifi
                        
                    ENV NIFI_HOME=/opt/nifi
                    ENV PATH=\$NIFI_HOME/bin:\$PATH
                    ENV NIFI_WEB_HTTP_PORT=8080
                        
                    EXPOSE 8080
                    USER nifi
                    ENTRYPOINT ["/opt/nifi/bin/nifi.sh", "run"]
                """

                sh "cp nifi_CICD_project/nifi/nifi-assembly/target/nifi-${params.NIFI_VERSION}-bin.zip docker/"
            }
        }

        stage('Build & Push Docker Image') {
        steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub-creds', usernameVariable: 'DH_USER', passwordVariable: 'DH_PASS')]) {
                dir('docker') {
                    sh '''
                            docker version >/dev/null 2>&1 || { echo "Docker daemon unreachable"; exit 1; }
                
                            # Pre-pull base image to avoid apt-get issues
                            docker pull eclipse-temurin:17-jre-jammy
                
                            echo "$DH_PASS" | docker login --username "$DH_USER" --password-stdin
                            docker build --build-arg NIFI_ZIP=nifi-${NIFI_VERSION}-bin.zip -t ${FULL_TAG} .
                            docker push ${FULL_TAG}
                    '''
              }
            }
          }
        }

        stage('Install CLI - eksctl and kubectl'){
            steps{
                dir('nifi_CICD_project/k8s-manifests'){
                    script{
                        sh """
                            chmod +x install-kctl.sh
                            ./install-kctl.sh start
                        """
                        echo 'Kubectl and Eksctl installed.'

 
                    }
                }
            }            
        }

        stage('Kubectl test') {
            steps {
                dir('nifi_CICD_project/') {
                        sh """                 
                            kubectl get nodes 
                        """
                }
                
            }
        }


        stage('Terraform initialization') {
            steps {
                dir('nifi_CICD_project/terraform') {
                     withCredentials([usernamePassword(credentialsId: 'AWS_CREDS', passwordVariable: 'AWS_SECRET_ACCESS_KEY', usernameVariable: 'AWS_ACCESS_KEY_ID')]) {
                        sh """
                            terraform init -upgrade
                            terraform apply -auto-approve
                        """
                    }
                }
            }

        }

        stage('Cache Terraform Outputs') {
            steps {
                script {

                    dir('nifi_CICD_project/') {
                        env.EKS_CLUSTER_NAME = sh(script: 'terraform -chdir=terraform output -raw eks_cluster_name', returnStdout: true).trim()
                        env.SUBNET_IDS_RAW = sh(script: 'terraform -chdir=terraform output -raw subnet_ids', returnStdout: true).trim()
                        env.SUBNET_IDS = env.SUBNET_IDS_RAW.replaceAll(',', ' ')
                    }
                
                    echo "Cluster Name: ${env.EKS_CLUSTER_NAME}"
                    echo "Subnets: ${env.SUBNET_IDS}"
                }
            }
        }



        stage('Generate Inventory') {
            steps {
                dir('nifi_CICD_project/') {
                    sh 'bash scripts/prepare_inventory.sh'
                }
                
            }
        }

        stage('Install Java and modify nifi properties') {
            steps { 
                dir('nifi_CICD_project/') {
                    sh 'ansible-playbook -i inventory.ini ansible/setup-nifi.yml'
                }
            }
        } 

    }
}